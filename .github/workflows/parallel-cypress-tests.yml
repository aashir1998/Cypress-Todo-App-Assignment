name: Parallel Cypress E2E Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  cypress-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        test-suite: [smoke, regression]
        include:
          - test-suite: smoke
            tag: '@Smoke'
            timeout: 15
            description: 'Smoke Tests'
          - test-suite: regression
            tag: '@Regression'
            timeout: 20
            description: 'Regression Tests'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Cache dependencies
      - name: Cache root node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-root-${{ hashFiles('package-lock.json') }}

      - name: Cache frontend node_modules
        uses: actions/cache@v3
        with:
          path: Todo App/frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('Todo App/frontend/package-lock.json') }}

      - name: Cache backend node_modules
        uses: actions/cache@v3
        with:
          path: Todo App/backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('Todo App/backend/package-lock.json') }}

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}

      - name: Clean workspace
        run: |
          rm -rf node_modules
          rm -rf "Todo App/frontend/node_modules"
          rm -rf "Todo App/backend/node_modules"
          npm cache clean --force

      - name: Install root dependencies
        run: npm ci --prefer-offline --no-audit --no-optional
        env:
          NODE_ENV: development

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit --no-optional
        working-directory: Todo App/frontend
        env:
          NODE_ENV: development

      - name: Install backend dependencies
        run: npm ci --prefer-offline --no-audit --no-optional
        working-directory: Todo App/backend
        env:
          NODE_ENV: development

      - name: Install Cypress binary
        run: npx cypress install
        working-directory: Automation Framework

      # Start both FE and BE (Backend: 3001, Frontend: 3000)
      - name: Start BE and FE Server
        run: npm start &
        env:
          REACT_APP_API_URL: http://localhost:3001
          NODE_ENV: development
          BROWSER: none
          CI: true

      # Wait for servers to be ready
      - name: Wait for servers
        run: |
          echo "Giving servers time to start up..."
          sleep 15
          
          echo "Waiting for backend server on port 3001..."
          timeout 60 bash -c 'until curl -s http://localhost:3001/health > /dev/null; do sleep 2; done'
          echo "Backend server is ready!"
          
          echo "Waiting for frontend server on port 3000..."
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'
          echo "Frontend server is ready!"
          
          echo "Both servers are ready for testing!"

      # Run Cypress tests using matrix strategy
      - name: Cypress ${{ matrix.description }}
        uses: cypress-io/github-action@v6
        with:
          working-directory: .
          command: cd 'Automation Framework' && npx cypress run --env grepTags=${{ matrix.tag }},grepFilterSpecs=true
        env:
          CI: true
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_TODO_API_URL: http://localhost:3001
          CYPRESS_TODO_APP_URL: http://localhost:3000

      # Upload Test Report
      - name: Upload ${{ matrix.description }} Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress ${{ matrix.description }} Report
          path: Automation Framework/cypress/reports/html

      # Upload screenshots on failure
      - name: Upload ${{ matrix.description }} Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress ${{ matrix.description }} Screenshots
          path: Automation Framework/cypress/screenshots

      # Upload videos on failure
      - name: Upload ${{ matrix.description }} Videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress ${{ matrix.description }} Videos
          path: Automation Framework/cypress/videos 