name: 🚀 Cypress Regression Tests

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
  HUSKY: 0

jobs:
  regression-tests:
    name: 🧪 Cypress E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # Checkout repo
      - name: ⚡ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Setup Node with caching
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            Todo App/frontend/package-lock.json
            Todo App/backend/package-lock.json

      # Cache node_modules + Cypress
      - name: 🗄️ Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            Todo App/frontend/node_modules
            Todo App/backend/node_modules
            ~/.cache/Cypress
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      # Install all dependencies
      - name: 📦 Install dependencies
        run: npm run install:all

      # Lint frontend (optional)
      - name: 🔍 Run lint
        run: npm run lint

      # Build frontend (needed for Cypress to serve built app)
      - name: 🏗️ Build frontend
        run: npm run build

      # Verify Cypress binary (ensures it's downloaded)
      - name: ✅ Verify Cypress
        run: npx cypress verify

      # Run Cypress regression tests in headless mode
      - name: 🧪 Run Cypress Regression Tests
        run: npm run ci:e2e
        env:
          CYPRESS_VIDEO: false
          CYPRESS_SCREENSHOTS: true
          CYPRESS_CHROME_FLAGS: --no-sandbox --disable-dev-shm-usage --disable-gpu --disable-software-rasterizer
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_URL: http://localhost:3001

      # Upload HTML report
      - name: 📊 Upload Cypress Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-report-${{ github.run_number }}
          path: Automation Framework/cypress/reports/html
          retention-days: 7

      # Upload screenshots/videos on failure
      - name: 📸 Upload Failure Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-failures-${{ github.run_number }}
          path: |
            Automation Framework/cypress/screenshots
            Automation Framework/cypress/videos
          retention-days: 3

      # Cleanup processes
      - name: 🧹 Cleanup
        if: always()
        run: |
          pkill -f "node.*Todo App" || true
          pkill -f "react-scripts" || true
          pkill -f "concurrently" || true

      # Summary in GitHub UI
      - name: 📋 Test Results Summary
        if: always()
        run: |
          echo "## 🧪 Cypress Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Node Version | 18 |" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Chrome (Headless) |" >> $GITHUB_STEP_SUMMARY
          echo "| Timestamp | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          if [ -f "Automation Framework/cypress/reports/html/index.html" ]; then
            echo "| Report Status | ✅ Generated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Report Status | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| Overall Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
